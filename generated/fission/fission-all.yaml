---
# Source: fission-all/templates/deployment.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: fission-function
  labels:
    name: fission-function
    chart: "fission-all-1.0.0"
    istio-injection: enabled

---
apiVersion: v1
kind: Namespace
metadata:
  name: fission-builder
  labels:
    name: fission-builder
    chart: "fission-all-1.0.0"
    istio-injection: enabled
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-configmap-getter
rules:
- apiGroups:
  - '*'
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - watch
  - list

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: package-getter
rules:
- apiGroups:
  - '*'
  resources:
  - packages
  verbs:
  - get
  - watch
  - list

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-svc
  namespace: fission

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: fission-admin
  namespace: fission
subjects:
  - kind: ServiceAccount
    name: fission-svc
    namespace: fission
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: fission-crd
subjects:
- kind: ServiceAccount
  name: fission-svc
  namespace: fission
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-fetcher
  namespace: fission-function
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fission-builder
  namespace: fission-builder

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-config
  namespace: fission
data:
  "config.yaml": Y2FuYXJ5OgogIGVuYWJsZWQ6IHRydWUK

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: controller
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: controller
        application: fission-api
    spec:
      containers:
      - name: controller
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--controllerPort", "8888", "--collectorEndpoint", ""]
        env:
          - name: FISSION_FUNCTION_NAMESPACE
            value: "fission-function"
          - name: TRACING_SAMPLING_RATE
            value: "0.5"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        readinessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 35
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config/config.yaml
          subPath: config.yaml
      serviceAccount: fission-svc
      volumes:
      - name: config-volume
        configMap:
          name: feature-config
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: router
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        application: fission-router
        svc: router
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: router
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--routerPort", "8888", "--executorUrl", "http://executor.fission", "--collectorEndpoint", ""]
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ROUTER_ROUND_TRIP_TIMEOUT
            value: "50ms"
          - name: ROUTER_ROUNDTRIP_TIMEOUT_EXPONENT
            value: "2"
          - name: ROUTER_ROUND_TRIP_KEEP_ALIVE_TIME
            value: "30s"
          - name: ROUTER_ROUND_TRIP_MAX_RETRIES
            value: "10"
          - name: ROUTER_ROUND_TRIP_SVC_ADDRESS_MAX_RETRIES
            value: "5"
          - name: ROUTER_ROUND_TRIP_SVC_ADDRESS_UPDATE_TIMEOUT
            value: "30"
          - name: DEBUG_ENV
            value: "true"
          - name: TRACING_SAMPLING_RATE
            value: "0.5"
        readinessProbe:
          httpGet:
            path: "/router-healthz"
            port: 8888
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/router-healthz"
            port: 8888
          initialDelaySeconds: 35
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8888
          name: http
      serviceAccount: fission-svc

---
apiVersion: v1
kind: Service
metadata:
  name: executor
  labels:
    svc: executor
    chart: "fission-all-1.0.0"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8888
  selector:
    svc: executor

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: executor
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: executor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: executor
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--executorPort", "8888", "--namespace", "fission-function", "--fission-namespace", "fission", "--collectorEndpoint", ""]
        env:
        - name: FETCHER_IMAGE
          value: "fission/fetcher:1.0.0"
        - name: FETCHER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: RUNTIME_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: ENABLE_ISTIO
          value: "true"
        - name: FETCHER_MINCPU
          value: "10m"
        - name: FETCHER_MINMEM
          value: "16Mi"
        - name: FETCHER_MAXCPU
          value: "1000m"
        - name: FETCHER_MAXMEM
          value: "128Mi"
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        readinessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 8888
          initialDelaySeconds: 35
          periodSeconds: 5
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8888
          name: http
      serviceAccount: fission-svc

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: buildermgr
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: buildermgr
    spec:
      containers:
      - name: buildermgr
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--builderMgr", "--storageSvcUrl", "http://storagesvc.fission", "--envbuilder-namespace", "fission-builder", "--collectorEndpoint", ""]
        env:
        - name: FETCHER_IMAGE
          value: "fission/fetcher:1.0.0"
        - name: FETCHER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: BUILDER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        - name: TRACE_JAEGER_COLLECTOR_ENDPOINT
          value: ""
        - name: ENABLE_ISTIO
          value: "true"
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
      serviceAccount: fission-svc

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kubewatcher
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: kubewatcher
    spec:
      containers:
      - name: kubewatcher
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--kubewatcher", "--routerUrl", "http://router.fission", "--collectorEndpoint", ""]
        env:
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
      serviceAccount: fission-svc

---
apiVersion: v1
kind: Service
metadata:
  name: influxdb
  labels:
    svc: influxdb
    chart: "fission-all-1.0.0"
spec:
  type: ClusterIP
  ports:
  - port: 8086
    targetPort: 8086
  selector:
    svc: influxdb

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: influxdb
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: influxdb
    spec:
      containers:
      - name: influxdb
        image: fission/influxdb
        env:
          - name: PRE_CREATE_DB
            value: fissionFunctionLog
          - name: ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: influxdb
                key: username
          - name: INFLUXDB_INIT_PWD
            valueFrom:
              secretKeyRef:
                name: influxdb
                key: password
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: timer
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: timer
    spec:
      containers:
      - name: timer
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--timer", "--routerUrl", "http://router.fission"]
      serviceAccount: fission-svc

#
# This is commented out until fission-ui allows configuring the
# namespace. Right now it just crashes if Release.Namespace !=
# "fission".
#
#---
#apiVersion: extensions/v1beta1
#kind: Deployment
#metadata:
#  name: fission-ui
#  labels:
#    chart: "fission-all-1.0.0"
#spec:
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        svc: fission-ui
#    spec:
#      containers:
#      - name: nginx
#        image: index.docker.io/
#      - name: kubectl-proxy
#        image: index.docker.io/lachlanevenson/k8s-kubectl
#        args: ["proxy", "--port", "8001", "--address", "127.0.0.1"]
#      serviceAccount: fission-svc
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    svc: nats-streaming
  name: nats-streaming
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: nats-streaming
    spec:
      containers:
      - name: nats-streaming
        image: nats-streaming
        args: [
          "--cluster_id", "fissionMQTrigger",
          "--auth", "defaultFissionAuthToken",
          "--max_channels", "0"
        ]
        ports:
        - containerPort: 4222
          hostPort: 4222
          protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mqtrigger-nats-streaming
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: mqtrigger
        messagequeue: nats-streaming
    spec:
      containers:
      - name: mqtrigger
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--mqt", "--routerUrl", "http://router.fission", "--collectorEndpoint", ""]
        env:
        - name: MESSAGE_QUEUE_TYPE
          value: nats-streaming
        - name: MESSAGE_QUEUE_URL
          value: nats://defaultFissionAuthToken@nats-streaming:4222
        - name: TRACING_SAMPLING_RATE
          value: "0.5"          
      serviceAccount: fission-svc
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: storagesvc
  labels:
    chart: "fission-all-1.0.0"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        svc: storagesvc
        application: fission-storage
    spec:
      containers:
      - name: storagesvc
        image: "index.docker.io/fission/fission-bundle:1.0.0"
        imagePullPolicy: IfNotPresent
        command: ["/fission-bundle"]
        args: ["--storageServicePort", "8000", "--filePath", "/fission", "--collectorEndpoint", ""]
        env:
        - name: TRACING_SAMPLING_RATE
          value: "0.5"
        - name: PRUNE_INTERVAL
          value: "60"
        volumeMounts:
        - name: fission-storage
          mountPath: /fission
        readinessProbe:
          httpGet:
            path: "/healthz"
            port: 8000
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 8000
          initialDelaySeconds: 35
          periodSeconds: 5
      serviceAccount: fission-svc
      volumes:
      - name: fission-storage
        persistentVolumeClaim:
          claimName: fission-storage-pvc
---
# Source: fission-all/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: influxdb
  labels:
    chart: "fission-all-1.0.0"
type: Opaque
data:
  username: "YWRtaW4="
  password: "VExGczExYk0zNVZ4d3pEZ05NbkE="

---
# Source: fission-all/templates/fluentd.yaml
# Fluentd deployment for Fission
#
# Requires:
# - service account: fission-svc
apiVersion: v1
kind: ConfigMap
metadata:
  name: fission-fission-fluentd
data:
  td-agent.conf: |
   # Hide all fluent-related logs
   <match fluent.**>
     type null
   </match>
   
   # Collect all logs from the containers in the current namespace
   <source>
     type tail
     format json
     time_key time
     path "#{ENV['FLUENTD_PATH']}"
     time_format %Y-%m-%dT%H:%M:%S.%NZ
     tag fission.*
     read_from_head true
     refresh_interval 5
   </source>
   
   # Augment logs with Kubernetes metadata
   <filter fission.**>
      type kubernetes_metadata
   </filter>
   
   # Simplify the nested objects to XX_YY_ZZ names
   <filter fission.**>
      type flatten_hash
      separator _
   </filter>
   
   # Add `funcuid` to the record (using the functionUid label)
   <match fission.**>
      type record_reformer
      enable_ruby false
      tag log
      <record>
        funcuid ${kubernetes_labels_functionUid}
      </record>
   </match>
   
   # Push logs into influxdb
   <match **>
     @type influxdb
       host  "#{ENV['INFLUXDB_ADDRESS']}"
       port  "#{ENV['INFLUXDB_PORT']}"
       dbname "#{ENV['INFLUXDB_DBNAME']}"
       user  "#{ENV['INFLUXDB_USERNAME']}"
       password  "#{ENV['INFLUXDB_PASSWD']}"
       use_ssl false
       time_precision ns
       tag_keys ["funcuid"]
       sequence_tag _seq
       buffer_type file
       buffer_path /var/log/fission/fluentd.buffer
       buffer_chunk_limit 128m
       buffer_queue_limit 256
       flush_interval 5
       retry_limit 10
       retry_wait 1.0
       num_threads 2
   </match>
   

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: logger
  labels:
    chart: "fission-all-1.0.0"
spec:
  template:
    metadata:
      labels:
        svc: logger
    spec:
      containers:
        - name: fluentd
          image: "index.docker.io/fission/fluentd:1.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: INFLUXDB_ADDRESS
              value: influxdb
            - name: INFLUXDB_PORT
              value: "8086"
            - name: INFLUXDB_DBNAME
              value: "fissionFunctionLog"
            - name: INFLUXDB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: influxdb
                  key: username
            - name: INFLUXDB_PASSWD
              valueFrom:
                secretKeyRef:
                  name: influxdb
                  key: password
            - name: FLUENTD_PATH
              value: /var/log/containers/*fission-function*.log
          volumeMounts:
            - name: container-log
              mountPath: /var/log/
              readOnly: true
            - name: docker-log
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: fission-log
              mountPath: /var/log/fission
              readOnly: false
            - name: fluentd-config
              mountPath: /etc/td-agent/
              readOnly: true
      serviceAccount: fission-svc
      volumes:
        - name: container-log
          hostPath:
            path: /var/log/
        - name: docker-log
          hostPath:
            path: /var/lib/docker/containers
        - name: fission-log
          hostPath:
            path: /var/log/fission
        # Fluentd config location: /etc/td-agent/td-agent.conf
        - name: fluentd-config
          configMap:
            name: fission-fission-fluentd
  updateStrategy:
    type: RollingUpdate

---
# Source: fission-all/templates/pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: fission-storage-pvc
  labels:
    app: fission-storage
    chart: "fission-all-1.0.0"
    release: "fission"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"

---
# Source: fission-all/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    chart: "fission-all-1.0.0"
spec:
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: redis
  selector:
    app: redis
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: redis
  labels:
    chart: "fission-all-1.0.0"
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:3.2-alpine
          imagePullPolicy: Always
          ports:
          - containerPort: 6379
            name: redis

---
# Source: fission-all/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: router
  labels:
    svc: router
    application: fission-router
    chart: "fission-all-1.0.0"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8888
  selector:
    svc: router

---
apiVersion: v1
kind: Service
metadata:
  name: controller
  labels:
    svc: controller
    application: fission-api
    chart: "fission-all-1.0.0"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8888
  selector:
    svc: controller
---
apiVersion: v1
kind: Service
metadata:
  name: nats-streaming
  labels:
    svc: nats-streaming
    chart: "fission-all-1.0.0"
spec:
  type: ClusterIP
  ports:
  - port: 4222
    targetPort: 4222
  selector:
    svc: nats-streaming
---
apiVersion: v1
kind: Service
metadata:
  name: storagesvc
  labels:
    svc: storagesvc
    application: fission-storage
    chart: "fission-all-1.0.0"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
  selector:
    svc: storagesvc

---
# Source: fission-all/templates/pre-upgrade-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: fission-fission-all-1.0.0-512
  labels:
    # The "release" convention makes it easy to tie a release to all of the
    # Kubernetes resources that were created as part of that release.
    release: "fission"
    # This makes it easy to audit chart usage.
    chart: fission-all-1.0.0
    app: fission-all
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      name: fission-fission-all
      labels:
        release: "fission"
        app: fission-all
    spec:
      restartPolicy: Never
      containers:
      - name: pre-upgrade-job
        image: fission/pre-upgrade-checks:1.0.0
        imagePullPolicy: IfNotPresent
        command: [ "/pre-upgrade-checks" ]
        args: ["--fn-pod-namespace", "fission-function", "--envbuilder-namespace", "fission-builder"]
      serviceAccount: fission-svc
---
# Source: fission-all/templates/nonhelm-install-job.yaml


---
# Source: fission-all/templates/post-install-job.yaml


---
# Source: fission-all/templates/post-upgrade-job.yaml


